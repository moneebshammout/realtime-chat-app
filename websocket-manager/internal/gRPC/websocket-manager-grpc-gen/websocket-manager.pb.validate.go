// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/websocket-manager.proto

package websocket_manager_grpc_gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Data

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on DiscoverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverRequestMultiError, or nil if none found.
func (m *DiscoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DiscoverRequestMultiError(errors)
	}

	return nil
}

// DiscoverRequestMultiError is an error wrapping multiple validation errors
// returned by DiscoverRequest.ValidateAll() if the designated constraints
// aren't met.
type DiscoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverRequestMultiError) AllErrors() []error { return m }

// DiscoverRequestValidationError is the validation error returned by
// DiscoverRequest.Validate if the designated constraints aren't met.
type DiscoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverRequestValidationError) ErrorName() string { return "DiscoverRequestValidationError" }

// Error satisfies the builtin error interface
func (e DiscoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverRequestValidationError{}

// Validate checks the field values on DiscoverResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverResponseMultiError, or nil if none found.
func (m *DiscoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return DiscoverResponseMultiError(errors)
	}

	return nil
}

// DiscoverResponseMultiError is an error wrapping multiple validation errors
// returned by DiscoverResponse.ValidateAll() if the designated constraints
// aren't met.
type DiscoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverResponseMultiError) AllErrors() []error { return m }

// DiscoverResponseValidationError is the validation error returned by
// DiscoverResponse.Validate if the designated constraints aren't met.
type DiscoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverResponseValidationError) ErrorName() string { return "DiscoverResponseValidationError" }

// Error satisfies the builtin error interface
func (e DiscoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverResponseValidationError{}

// Validate checks the field values on UnregisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnregisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterRequestMultiError, or nil if none found.
func (m *UnregisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnregisterRequestMultiError(errors)
	}

	return nil
}

// UnregisterRequestMultiError is an error wrapping multiple validation errors
// returned by UnregisterRequest.ValidateAll() if the designated constraints
// aren't met.
type UnregisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterRequestMultiError) AllErrors() []error { return m }

// UnregisterRequestValidationError is the validation error returned by
// UnregisterRequest.Validate if the designated constraints aren't met.
type UnregisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterRequestValidationError) ErrorName() string {
	return "UnregisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterRequestValidationError{}

// Validate checks the field values on UnregisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterResponseMultiError, or nil if none found.
func (m *UnregisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return UnregisterResponseMultiError(errors)
	}

	return nil
}

// UnregisterResponseMultiError is an error wrapping multiple validation errors
// returned by UnregisterResponse.ValidateAll() if the designated constraints
// aren't met.
type UnregisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterResponseMultiError) AllErrors() []error { return m }

// UnregisterResponseValidationError is the validation error returned by
// UnregisterResponse.Validate if the designated constraints aren't met.
type UnregisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterResponseValidationError) ErrorName() string {
	return "UnregisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterResponseValidationError{}
