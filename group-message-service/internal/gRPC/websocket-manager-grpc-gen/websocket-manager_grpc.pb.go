// for validation examples
// https://github.com/bufbuild/protovalidate/tree/main/examples

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/websocket-manager.proto

package websocket_manager_grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebsocketManager_Register_FullMethodName   = "/WebsocketManager.WebsocketManager/Register"
	WebsocketManager_Discover_FullMethodName   = "/WebsocketManager.WebsocketManager/Discover"
	WebsocketManager_Unregister_FullMethodName = "/WebsocketManager.WebsocketManager/Unregister"
)

// WebsocketManagerClient is the client API for WebsocketManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketManagerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
}

type websocketManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketManagerClient(cc grpc.ClientConnInterface) WebsocketManagerClient {
	return &websocketManagerClient{cc}
}

func (c *websocketManagerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, WebsocketManager_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketManagerClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := c.cc.Invoke(ctx, WebsocketManager_Discover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketManagerClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, WebsocketManager_Unregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketManagerServer is the server API for WebsocketManager service.
// All implementations must embed UnimplementedWebsocketManagerServer
// for forward compatibility
type WebsocketManagerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	mustEmbedUnimplementedWebsocketManagerServer()
}

// UnimplementedWebsocketManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWebsocketManagerServer struct {
}

func (UnimplementedWebsocketManagerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWebsocketManagerServer) Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedWebsocketManagerServer) Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedWebsocketManagerServer) mustEmbedUnimplementedWebsocketManagerServer() {}

// UnsafeWebsocketManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketManagerServer will
// result in compilation errors.
type UnsafeWebsocketManagerServer interface {
	mustEmbedUnimplementedWebsocketManagerServer()
}

func RegisterWebsocketManagerServer(s grpc.ServiceRegistrar, srv WebsocketManagerServer) {
	s.RegisterService(&WebsocketManager_ServiceDesc, srv)
}

func _WebsocketManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketManager_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketManagerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketManager_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketManagerServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketManager_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketManagerServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketManager_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketManagerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketManager_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketManagerServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketManager_ServiceDesc is the grpc.ServiceDesc for WebsocketManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebsocketManager.WebsocketManager",
	HandlerType: (*WebsocketManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _WebsocketManager_Register_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _WebsocketManager_Discover_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _WebsocketManager_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/websocket-manager.proto",
}
